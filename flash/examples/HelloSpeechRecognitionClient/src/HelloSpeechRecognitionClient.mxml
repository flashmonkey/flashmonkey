<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" 
	backgroundColor="#ffffff"
	width="600"
	height="150"
	applicationComplete="onApplicationComplete();">

	<mx:Script>
	    <![CDATA[
	    	import org.flashmonkey.flash.api.connection.messages.IMessage;
	    	import com.joeberkovitz.moccasin.service.IOperation;
	    	import org.flashmonkey.flash.connection.client.BasicClient;
	    	import org.flashmonkey.flash.api.connection.IClient;
	    	import mx.logging.Log;
	    	import mx.logging.ILogger;
	    import flash.media.Microphone;
	    import flash.events.ActivityEvent;
	    import flash.events.Event;
	    import flash.events.StatusEvent;
	   
      


	
		  private static const logger:ILogger = Log.getLogger("Main");
	
	      public var mic:Microphone;
	      
	      private var micActive:Boolean = false;
	      
	      private var netStream:NetStream;
	     
	     private var _count:int = 0;
	     
	     private var _currentStream:String = "stream";
	     
	     private var _client:IClient;
	     
	     private var diceArray:Array = [];
	     
	     private var diceSeperation:Number = 100;
	     
	     private var numberMap:Dictionary = new Dictionary();
	      
	      private function onApplicationComplete():void 
		  {
			  _client = new BasicClient();
			  _client.handshake.addClassToRegister(SpeechRecognitionMessage);
			  var connectionOperation:IOperation = _client.connect("rtmp://localhost/HelloSpeechRecognition", ["flashmonkey", "password"]);
			  connectionOperation.addEventListener(Event.COMPLETE, onConnectionComplete);
			  connectionOperation.execute();
		 }
		
		  private function onConnectionComplete(e:Event):void 
		  {
		  		trace("Connection established");
		  	
			  
	      	  createMic();
	      	  createNetStream();
	      	  createNumberMap();
		  }
		  
		  private function createNumberMap():void 
		  {
		  	numberMap["oh"] = 0;
		  	numberMap["one"] = 1;
		  	numberMap["two"] = 2;
		  	numberMap["three"] = 3;
		  	numberMap["four"] = 4;
		  	numberMap["five"] = 5;
		  	numberMap["six"] = 6;
		  	numberMap["seven"] = 7;
		  	numberMap["eight"] = 8;
		  	numberMap["nine"] = 9;
		  }
	      
	      public function createNetStream():void 
	      {
	      	netStream = new NetStream(NetConnection(_client.connection));
	      	netStream.attachAudio(mic);
	      }
	
	      public function createMic():void
	      {
	      	trace("Creating mic");
	      	
	      	var deviceArray:Array = Microphone.names;

	        mic = Microphone.getMicrophone(0);
	        
	        trace("mic " + mic);

	        mic.gain = 60;
			mic.rate = 11;
			mic.setUseEchoSuppression(true);
			mic.setLoopBack(true);
			mic.setSilenceLevel(5, 1000);

	        mic.addEventListener(ActivityEvent.ACTIVITY, activity);
	        
	        var micDetails:String = "Sound input device name: " + mic.name + '\n';
			micDetails += "Gain: " + mic.gain + '\n';
			micDetails += "Rate: " + mic.rate + " kHz" + '\n';
			micDetails += "Muted: " + mic.muted + '\n';
			micDetails += "Silence level: " + mic.silenceLevel + '\n';
			micDetails += "Silence timeout: " + mic.silenceTimeout + '\n';
			micDetails += "Echo suppression: " + mic.useEchoSuppression + '\n';
	      }
	      
	      public function setClientID(id:String):void 
	      {
	      	
	      }
	
	      private function activity(event:ActivityEvent):void
	      {
			if (event.activating)
			{
				netStream.attachAudio(mic);
				_currentStream = "speech" + _count++;
				netStream.publish(_currentStream, "record");
	        	addEventListener(Event.ENTER_FRAME, showMicLevel);
	        	
	  		}
	  		else
	  		{
	  			netStream.pause();

	  			var message:IMessage = new SpeechRecognitionMessage(_currentStream);
	  			message.addEventListener(Event.COMPLETE, onSpeechRecognitionComplete);
	  			message.write(_client.connection);
	  			removeEventListener(Event.ENTER_FRAME, showMicLevel);
	  		}
	      }
	      
	      public function onSpeechRecognitionComplete(e:Event):void 
	      {
	      	var message:SpeechRecognitionMessage = SpeechRecognitionMessage(e.target);
	      	
	      	clearDiceArray();
	      	createNewDice(message.bestResult);

	      	
	      }
	      
	      private function clearDiceArray():void 
	      {
	      	for each (var die:Sprite in diceArray)
	      	{
	      		rawChildren.removeChild(die);
	      	}
	      	
	      	diceArray = [];
	      }
	      
	      private function createNewDice(result:String):void 
	      {
	      	var numbers:Array = result.split(" ");
	      	
	      	output(numbers);
	      	
	      	var startX:Number = (stage.stageWidth / 2) - (((numbers.length - 1) * diceSeperation) / 2);
	      	
	      	for (var i:int = 0; i < numbers.length; i++)
	      	{
	      		var die:RollingDice = new RollingDice();
	      		die.x = startX + (diceSeperation * i);
	      		die.y = stage.stageHeight / 2;
	      		//die.scaleX = die.scaleY = 3;
	      		
	      		var n:String = String(numbers[i]);
	      		var numberToShow:Number = Number(numberMap[n]);

	      		die.setDots(numberToShow);
	      		die.setColour(i + 1);
	      		
	      		die.setDelay((i + 1) * 500);
	      		
	      		rawChildren.addChild(die);
	      		
	      		diceArray.push(die);
	      	}
	      }
	      
	      public function onSpeechFault(o:Object):void 
	      {
	      	
	      }
	      
	      private function output(msg:Object):void 
	      {
	      	//var s:String = outputText.text;
	      	
	      	//outputText.text = String(msg) + "\n" + s;
	      }
	
	      private function showMicLevel(event:Event):void
	      {
	        level.graphics.clear();
	        level.graphics.beginFill(0xcccccc, 0.5);
	        level.graphics.drawRect(0, 0, (mic.activityLevel * 30), 150);
	        level.graphics.endFill();
	      }
	
	    ]]>
	</mx:Script>

	<mx:Canvas width="100%" height="100%" id="level"/>

</mx:Application>